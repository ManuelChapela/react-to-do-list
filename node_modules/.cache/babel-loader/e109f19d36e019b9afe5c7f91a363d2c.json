{"ast":null,"code":"var _jsxFileName = \"/Users/Chapeladas/Desktop/Web design/The Bridge/Apuntes clase/Duodecima semana/Dia 1 _ Ejercicio semana anterior CRUD react/ft-ene21-ReactJS-examples-main/src/components/Main/Main.js\";\nimport React from 'react';\nimport './Main.css'; //import spinner from './spinner.gif';\n\nimport Post from '../Post/Post';\nimport Form from '../Form/Form';\nimport Search from '../Search/Search';\nimport getPosts from '../../data/dataProvider'; // ----------- STATE ITNITIAL\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Main extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.addPost = title => {\n      this.setState({\n        posts: [...this.state.posts, {\n          title,\n          check: false,\n          priority: \"baja\"\n        }]\n      });\n    };\n\n    this.drawPosts = () => {\n      if (this.state.posts.length > 0) {\n        return this.state.posts.map((item, i) =>\n        /*#__PURE__*/\n        // const newPost = {TODO EL OBJ aquí dentro} ---> data={newPost}\n        _jsxDEV(Post, {\n          title: item.title,\n          fnBorrar: this.deletePosts,\n          keyy: i,\n          fnEdit: this.editPosts,\n          fnFlag: this.loadPosts,\n          tareaHecha: this.tareaHecha,\n          claseCheck: item.check,\n          editPriority: this.editPriority,\n          statePriority: item.priority\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 7\n        }, this));\n      }\n\n      return /*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"No hay datos\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 14\n      }, this);\n    };\n\n    this.deletePosts = el => {\n      const task = this.state.posts.filter((index, i) => i !== el);\n      this.setState({\n        posts: task\n      });\n    };\n\n    this.editPosts = (i, newTitle) => {\n      const newTitles = [...this.state.posts]; // Copy of an array\n\n      newTitles[i].title = newTitle; // Modificar la copia con la i y el nuevo título\n\n      this.setState({\n        posts: newTitles\n      }); // Se sustituye el nuevo título\n\n      this.setState({\n        insert: true\n      }); // Cambiar el estado de INSERT\n    };\n\n    this.tareaHecha = i => {\n      const newPosts = this.state.posts.map((el, index) => {\n        // Se hace un map de un array y si el key(i) coincide con el index, se le cambia el estado a check (que está dentro de posts). Se returna el elemento modificado. Y se cambia el estado a este objeto newPosts\n        if (i == index) {\n          el.check = !el.check;\n        }\n\n        return el;\n      });\n      this.setState({\n        posts: newPosts\n      }); // Aquí se atribuye el nuevo estado de posts con newPosts\n    };\n\n    this.editPriority = (i, statePriority) => {\n      const priority2 = this.state.posts.map((el, index) => {\n        console.log(\"1\", el.priority); // false \n\n        console.log(\"2\", statePriority); //  POSICIÓN DONDE SE HACE CLIC\n\n        console.log(\"3\", index); //  La posición del objeto en el array\n\n        console.log(\"4\", i); //  POSICIÓN DONDE SE HACE CLIC\n\n        return el.priority;\n      });\n      this.setState({\n        priority: priority2\n      });\n    };\n\n    this.createNewPost = () => {\n      this.setState({\n        mode: 1\n      });\n    };\n\n    this.state = {\n      posts: [],\n      user: this.props.user || \"\",\n      limit: 10,\n      // insert: true,\n      mode: 0\n    };\n  }\n\n  async componentDidMount() {\n    const newPosts = await getPosts();\n    this.setState({\n      posts: [...this.state.posts, ...newPosts]\n    });\n  } // ---------- CONEXIÓN CON EL COMPONENTE POST\n\n\n  render() {\n    return this.state.mode == 0 ? /*#__PURE__*/_jsxDEV(\"main\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: [\"Hola, \", this.state.user ? this.state.user : \"¡qué pasa Chape!\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"editLine\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"btn\",\n          children: \"Holi\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(Form, {\n          createNewPost: this.createNewPost,\n          addPost: this.addPost,\n          editPosts: this.editPosts,\n          state: this.state.insert\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 13\n      }, this), this.drawPosts()]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 11\n    }, this) : (this.state.mode = 1) ? /*#__PURE__*/_jsxDEV(\"main\", {\n      children: /*#__PURE__*/_jsxDEV(Form, {\n        createNewPost: this.createNewPost,\n        addPost: this.addPost,\n        editPosts: this.editPosts,\n        state: this.state.insert\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 11\n    }, this) : /*#__PURE__*/_jsxDEV(\"main\", {\n      children: /*#__PURE__*/_jsxDEV(Form, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 11\n    }, this);\n  }\n\n}\n\nexport default Main;","map":{"version":3,"sources":["/Users/Chapeladas/Desktop/Web design/The Bridge/Apuntes clase/Duodecima semana/Dia 1 _ Ejercicio semana anterior CRUD react/ft-ene21-ReactJS-examples-main/src/components/Main/Main.js"],"names":["React","Post","Form","Search","getPosts","Main","Component","constructor","props","addPost","title","setState","posts","state","check","priority","drawPosts","length","map","item","i","deletePosts","editPosts","loadPosts","tareaHecha","editPriority","el","task","filter","index","newTitle","newTitles","insert","newPosts","statePriority","priority2","console","log","createNewPost","mode","user","limit","componentDidMount","render"],"mappings":"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","sourcesContent":["import React from 'react';\nimport './Main.css';\n//import spinner from './spinner.gif';\n\nimport Post from '../Post/Post';\nimport Form from '../Form/Form';\nimport Search from '../Search/Search'\nimport getPosts from '../../data/dataProvider';\n\n\n\n// ----------- STATE ITNITIAL\nclass Main extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      posts: [],\n      user: this.props.user || \"\",\n      limit: 10,\n      // insert: true,\n      mode: 0\n    }\n  }\n  \n  addPost = (title) => { \n    this.setState({\n      posts: [...this.state.posts, { title,  check: false, priority: \"baja\"}]\n    });\n  }\n\n  async componentDidMount() {\n    const newPosts = await getPosts()\n    this.setState({ posts: [...this.state.posts, ...newPosts] });\n  }\n  \n  // ---------- CONEXIÓN CON EL COMPONENTE POST\n  drawPosts = () => {\n    if (this.state.posts.length > 0) {\n      return this.state.posts.map((item, i) =>\n\n      // const newPost = {TODO EL OBJ aquí dentro} ---> data={newPost}\n      <Post title={item.title} fnBorrar={this.deletePosts} keyy={i} fnEdit={this.editPosts} fnFlag={this.loadPosts} tareaHecha={this.tareaHecha} claseCheck={item.check} editPriority={this.editPriority} statePriority={item.priority} />\n      )\n    }\n      return <h4>No hay datos</h4>\n    }\n      \n// ---------- FUNCIÓN ELIMINAR AL HACER CLIC EN EL BOTON de POST\n  deletePosts = (el) => { \n          const task = this.state.posts.filter((index, i )=> i !== el);\n          this.setState({posts: task})\n        \n      }\n      \n// ---------- FUNCIÓN EDITAR AL HACER CLIC EN EL BOTON de POST\n  editPosts = (i, newTitle) => {\n      const newTitles = [...this.state.posts];  // Copy of an array\n      newTitles[i].title = newTitle             // Modificar la copia con la i y el nuevo título\n      this.setState({ posts: newTitles })       // Se sustituye el nuevo título\n    \n      this.setState({insert: true})               // Cambiar el estado de INSERT\n  }\n\n  \n  \n  // --------- Tarea hecha, cambio de clase, tacha.\n  tareaHecha = (i) =>{   \n    const newPosts = this.state.posts.map((el, index) => {      // Se hace un map de un array y si el key(i) coincide con el index, se le cambia el estado a check (que está dentro de posts). Se returna el elemento modificado. Y se cambia el estado a este objeto newPosts\n      if(i == index){\n          el.check = !el.check\n        }\n        return el\n      }\n      )\n      this.setState({posts: newPosts})                          // Aquí se atribuye el nuevo estado de posts con newPosts\n    }\n  \n// ------ Editar la prioridad para que se pinte según prioridad media alta o baja\neditPriority = (i, statePriority) => {\n      const priority2 = this.state.posts.map((el, index) => {\n        \n        console.log(\"1\", el.priority);   // false \n        console.log(\"2\", statePriority); //  POSICIÓN DONDE SE HACE CLIC\n        console.log(\"3\", index);         //  La posición del objeto en el array\n        console.log(\"4\", i);             //  POSICIÓN DONDE SE HACE CLIC\n        \n        \n        return el.priority\n       \n        \n      })\n      this.setState({ priority: priority2})\n    }\n    \n  createNewPost = () => {\n    this.setState({mode: 1})\n  }\n\n\n\n\n\n  render() {\n    return (\n       (this.state.mode == 0) ?\n          <main>\n            <h1>Hola, {this.state.user ? this.state.user : \"¡qué pasa Chape!\"}</h1>\n            <div className=\"editLine\" >\n              <div className=\"btn\">Holi</div>\n              \n              <Form createNewPost={this.createNewPost} addPost={this.addPost} editPosts={this.editPosts} state={this.state.insert}/>\n                {/* <div className=\"btn\" onClick={this.drawPosts()}>CREAR NEW</div> */}\n            </div>\n            {/* <Form addPost={this.addPost} editPosts={this.editPosts} state={this.state.insert} /> */}\n           \n            {this.drawPosts()}                \n                  {/*Se pintan automáticamente los post que ya están creados */}\n\n\n            {/* <Search addPost={this.addPost} editPosts={this.editPosts} state={this.state.insert}/> */}\n          </main> \n      : (this.state.mode = 1) ?\n          <main>\n            <Form createNewPost={this.createNewPost} addPost={this.addPost} editPosts={this.editPosts} state={this.state.insert}/>\n          </main>\n\n      :   <main>\n            <Form /> \n          </main>\n    )  \n  }\n}\n\nexport default Main;"]},"metadata":{},"sourceType":"module"}